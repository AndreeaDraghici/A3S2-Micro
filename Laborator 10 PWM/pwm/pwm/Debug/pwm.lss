
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000049a  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080009e  0080009e  0000056c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebb  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  00001503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006de  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000419  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d4  00000000  00000000  0000293d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003011  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e9       	ldi	r26, 0x9E	; 158
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  8a:	0c 94 4b 02 	jmp	0x496	; 0x496 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wr_LCDreg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	96 2f       	mov	r25, r22
  94:	92 95       	swap	r25
  96:	9f 70       	andi	r25, 0x0F	; 15
  98:	92 bb       	out	0x12, r25	; 18
  9a:	81 11       	cpse	r24, r1
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <wr_LCDreg+0x14>
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	8f 7e       	andi	r24, 0xEF	; 239
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	03 c0       	rjmp	.+6      	; 0xac <wr_LCDreg+0x1a>
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	82 bb       	out	0x12, r24	; 18
  bc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  c6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	8f 7d       	andi	r24, 0xDF	; 223
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	88 23       	and	r24, r24
  e6:	19 f0       	breq	.+6      	; 0xee <wr_LCDreg+0x5c>
  e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	08 95       	ret
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	6f 70       	andi	r22, 0x0F	; 15
  f8:	68 2b       	or	r22, r24
  fa:	62 bb       	out	0x12, r22	; 18
  fc:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 106:	82 b3       	in	r24, 0x12	; 18
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 116:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 120:	82 b3       	in	r24, 0x12	; 18
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	82 bb       	out	0x12, r24	; 18
 126:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
 130:	08 95       	ret

00000132 <initLCD>:
 132:	12 ba       	out	0x12, r1	; 18
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	81 bb       	out	0x11, r24	; 17
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	89 e6       	ldi	r24, 0x69	; 105
 13c:	98 e1       	ldi	r25, 0x18	; 24
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <initLCD+0xc>
 146:	00 c0       	rjmp	.+0      	; 0x148 <initLCD+0x16>
 148:	00 00       	nop
 14a:	6c e2       	ldi	r22, 0x2C	; 44
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 152:	25 e8       	ldi	r18, 0x85	; 133
 154:	2a 95       	dec	r18
 156:	f1 f7       	brne	.-4      	; 0x154 <initLCD+0x22>
 158:	00 00       	nop
 15a:	6c e2       	ldi	r22, 0x2C	; 44
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 162:	85 e8       	ldi	r24, 0x85	; 133
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <initLCD+0x32>
 168:	00 00       	nop
 16a:	6e e0       	ldi	r22, 0x0E	; 14
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 172:	95 e8       	ldi	r25, 0x85	; 133
 174:	9a 95       	dec	r25
 176:	f1 f7       	brne	.-4      	; 0x174 <initLCD+0x42>
 178:	00 00       	nop
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 182:	25 e8       	ldi	r18, 0x85	; 133
 184:	2a 95       	dec	r18
 186:	f1 f7       	brne	.-4      	; 0x184 <initLCD+0x52>
 188:	00 00       	nop
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 192:	8f e6       	ldi	r24, 0x6F	; 111
 194:	97 e1       	ldi	r25, 0x17	; 23
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <initLCD+0x64>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <initLCD+0x6a>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <gotoLC>:
	wr_LCDreg(IReg, 0x01);
    _delay_ms(2);
}

void gotoLC(unsigned char line, unsigned char col){
   if(line>=1 && line<=2 && col>=1 && col <= 16){
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	90 f4       	brcc	.+36     	; 0x1ca <gotoLC+0x2a>
 1a6:	66 23       	and	r22, r22
 1a8:	81 f0       	breq	.+32     	; 0x1ca <gotoLC+0x2a>
 1aa:	61 31       	cpi	r22, 0x11	; 17
 1ac:	70 f4       	brcc	.+28     	; 0x1ca <gotoLC+0x2a>
      wr_LCDreg(IReg, 0x80 + 0x40 * --line + --col); //set DDRAM address
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 96       	adiw	r24, 0x02	; 2
 1b2:	61 50       	subi	r22, 0x01	; 1
 1b4:	20 e4       	ldi	r18, 0x40	; 64
 1b6:	82 9f       	mul	r24, r18
 1b8:	60 0d       	add	r22, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	85 e8       	ldi	r24, 0x85	; 133
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <gotoLC+0x24>
 1c8:	00 00       	nop
 1ca:	08 95       	ret

000001cc <putchLCD>:
      _delay_us(50);
   }
}

void putchLCD(char ch){
	wr_LCDreg(DReg,ch);
 1cc:	68 2f       	mov	r22, r24
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 1d4:	85 e8       	ldi	r24, 0x85	; 133
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <putchLCD+0xa>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <putsLCD>:
   _delay_us(50);
}

void putsLCD( char ch[]){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	while(*ch)
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <putsLCD+0xe>
		putchLCD(*ch++);
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <putchLCD>
	wr_LCDreg(DReg,ch);
   _delay_us(50);
}

void putsLCD( char ch[]){
	while(*ch)
 1ec:	88 81       	ld	r24, Y
 1ee:	81 11       	cpse	r24, r1
 1f0:	fa cf       	rjmp	.-12     	; 0x1e6 <putsLCD+0x8>
		putchLCD(*ch++);
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <kbscan>:
      kbhit=0;
      
   }//end while
}//end main

char kbscan(){
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	63 97       	sbiw	r28, 0x13	; 19
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
   char tabela_trans[]="123A456B789C*0#D";
 20c:	81 e1       	ldi	r24, 0x11	; 17
 20e:	e1 e6       	ldi	r30, 0x61	; 97
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	de 01       	movw	r26, r28
 214:	11 96       	adiw	r26, 0x01	; 1
 216:	01 90       	ld	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	8a 95       	dec	r24
 21c:	e1 f7       	brne	.-8      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
   volatile unsigned char La; //linia activa
   volatile unsigned char Ca; //coloana activa
   unsigned char cod_intern;
   char cod_extern;

   for(DDRA=0x10;DDRA>0;DDRA<<=1) {
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	8a bb       	out	0x1a, r24	; 26
}//end main

char kbscan(){
   char tabela_trans[]="123A456B789C*0#D";

   unsigned char cols=0;
 222:	80 e0       	ldi	r24, 0x00	; 0
   volatile unsigned char La; //linia activa
   volatile unsigned char Ca; //coloana activa
   unsigned char cod_intern;
   char cod_extern;

   for(DDRA=0x10;DDRA>0;DDRA<<=1) {
 224:	0b c0       	rjmp	.+22     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 226:	8a e0       	ldi	r24, 0x0A	; 10
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
      _delay_us(4);
      cols=~PINA;
 22e:	89 b3       	in	r24, 0x19	; 25
 230:	80 95       	com	r24
      cols=cols&0x0f;
 232:	8f 70       	andi	r24, 0x0F	; 15
      if(cols!=0)
 234:	31 f4       	brne	.+12     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
   volatile unsigned char La; //linia activa
   volatile unsigned char Ca; //coloana activa
   unsigned char cod_intern;
   char cod_extern;

   for(DDRA=0x10;DDRA>0;DDRA<<=1) {
 236:	9a b3       	in	r25, 0x1a	; 26
 238:	99 0f       	add	r25, r25
 23a:	9a bb       	out	0x1a, r25	; 26
 23c:	9a b3       	in	r25, 0x1a	; 26
 23e:	91 11       	cpse	r25, r1
 240:	f2 cf       	rjmp	.-28     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
      cols=~PINA;
      cols=cols&0x0f;
      if(cols!=0)
      break;
   }
   if(DDRA==0)
 242:	9a b3       	in	r25, 0x1a	; 26
 244:	99 23       	and	r25, r25
 246:	f1 f0       	breq	.+60     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
   return NOKEY;

   temp=DDRA;
 248:	2a b3       	in	r18, 0x1a	; 26
   for(La=0;temp!=0x10;temp>>=1)
 24a:	1a 8a       	std	Y+18, r1	; 0x12
 24c:	04 c0       	rjmp	.+8      	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
   La++;
 24e:	9a 89       	ldd	r25, Y+18	; 0x12
 250:	9f 5f       	subi	r25, 0xFF	; 255
 252:	9a 8b       	std	Y+18, r25	; 0x12
   }
   if(DDRA==0)
   return NOKEY;

   temp=DDRA;
   for(La=0;temp!=0x10;temp>>=1)
 254:	26 95       	lsr	r18
 256:	20 31       	cpi	r18, 0x10	; 16
 258:	d1 f7       	brne	.-12     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
   La++;

   for(Ca=0;cols!=1;cols>>=1)
 25a:	1b 8a       	std	Y+19, r1	; 0x13
 25c:	04 c0       	rjmp	.+8      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
   Ca++;
 25e:	9b 89       	ldd	r25, Y+19	; 0x13
 260:	9f 5f       	subi	r25, 0xFF	; 255
 262:	9b 8b       	std	Y+19, r25	; 0x13

   temp=DDRA;
   for(La=0;temp!=0x10;temp>>=1)
   La++;

   for(Ca=0;cols!=1;cols>>=1)
 264:	86 95       	lsr	r24
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	d1 f7       	brne	.-12     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
   Ca++;

   cod_intern=La*4+Ca;
 26a:	8a 89       	ldd	r24, Y+18	; 0x12
 26c:	9b 89       	ldd	r25, Y+19	; 0x13
 26e:	88 0f       	add	r24, r24
 270:	88 0f       	add	r24, r24
 272:	89 0f       	add	r24, r25
   cod_extern=tabela_trans[cod_intern];
 274:	e1 e0       	ldi	r30, 0x01	; 1
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ec 0f       	add	r30, r28
 27a:	fd 1f       	adc	r31, r29
 27c:	e8 0f       	add	r30, r24
 27e:	f1 1d       	adc	r31, r1
 280:	80 81       	ld	r24, Z
   return cod_extern;
 282:	01 c0       	rjmp	.+2      	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
      cols=cols&0x0f;
      if(cols!=0)
      break;
   }
   if(DDRA==0)
   return NOKEY;
 284:	8f e7       	ldi	r24, 0x7F	; 127
   Ca++;

   cod_intern=La*4+Ca;
   cod_extern=tabela_trans[cod_intern];
   return cod_extern;
}
 286:	63 96       	adiw	r28, 0x13	; 19
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <main>:
#include <stdlib.h>
#define K 125
#define NOKEY 0x7F
char kbscan();

int main(){
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	2a 97       	sbiw	r28, 0x0a	; 10
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
   unsigned char code_now = NOKEY, code_ante;
   unsigned char kbhit=0, kbcode=NOKEY, loop_cnt=0;
   int lumi=50;  //luminozitatea
   char buf_lumi[10];

   initLCD();
 2ac:	0e 94 99 00 	call	0x132	; 0x132 <initLCD>

   //initializari pentru timer0 - fast PWM

   //       ---------- PWM Fast Mode
   //       |  |
   TCCR0=0b01101100;
 2b0:	8c e6       	ldi	r24, 0x6C	; 108
 2b2:	83 bf       	out	0x33, r24	; 51
   //        || |||
   //        ||  -----p=256
   //        --------- OC0 clear on compare match, set at bottom (non-inverting mode)

   OCR0=128;
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	8c bf       	out	0x3c, r24	; 60
   //seteaza OC0 ca iesire
   setbit(DDRB, 3);
 2b8:	87 b3       	in	r24, 0x17	; 23
 2ba:	88 60       	ori	r24, 0x08	; 8
 2bc:	87 bb       	out	0x17, r24	; 23
   gotoLC(1, 1);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gotoLC>
   putsLCD("Astept     ");
 2c6:	82 e7       	ldi	r24, 0x72	; 114
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
char kbscan();

int main(){
   unsigned char code_now = NOKEY, code_ante;
   unsigned char kbhit=0, kbcode=NOKEY, loop_cnt=0;
   int lumi=50;  //luminozitatea
 2ce:	0f 2e       	mov	r0, r31
 2d0:	f2 e3       	ldi	r31, 0x32	; 50
 2d2:	ef 2e       	mov	r14, r31
 2d4:	f1 2c       	mov	r15, r1
 2d6:	f0 2d       	mov	r31, r0
#define NOKEY 0x7F
char kbscan();

int main(){
   unsigned char code_now = NOKEY, code_ante;
   unsigned char kbhit=0, kbcode=NOKEY, loop_cnt=0;
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	0f e7       	ldi	r16, 0x7F	; 127
#define K 125
#define NOKEY 0x7F
char kbscan();

int main(){
   unsigned char code_now = NOKEY, code_ante;
 2dc:	0f 2e       	mov	r0, r31
 2de:	ff e7       	ldi	r31, 0x7F	; 127
 2e0:	df 2e       	mov	r13, r31
 2e2:	f0 2d       	mov	r31, r0
   setbit(DDRB, 3);
   gotoLC(1, 1);
   putsLCD("Astept     ");
   
   while(1){
      if(loop_cnt==200){
 2e4:	18 3c       	cpi	r17, 0xC8	; 200
 2e6:	59 f4       	brne	.+22     	; 0x2fe <main+0x66>
         code_ante=code_now;
         code_now = kbscan();
 2e8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <kbscan>
         if(code_now != NOKEY && code_ante == NOKEY){
 2ec:	8f 37       	cpi	r24, 0x7F	; 127
 2ee:	49 f0       	breq	.+18     	; 0x302 <main+0x6a>
 2f0:	2f e7       	ldi	r18, 0x7F	; 127
 2f2:	d2 16       	cp	r13, r18
 2f4:	51 f0       	breq	.+20     	; 0x30a <main+0x72>
   putsLCD("Astept     ");
   
   while(1){
      if(loop_cnt==200){
         code_ante=code_now;
         code_now = kbscan();
 2f6:	d8 2e       	mov	r13, r24
         if(code_now != NOKEY && code_ante == NOKEY){
            kbhit=1;
            kbcode=code_now;
         }
         loop_cnt=0;
 2f8:	10 e0       	ldi	r17, 0x00	; 0
   
   while(1){
      if(loop_cnt==200){
         code_ante=code_now;
         code_now = kbscan();
         if(code_now != NOKEY && code_ante == NOKEY){
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0a c0       	rjmp	.+20     	; 0x312 <main+0x7a>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 c0       	rjmp	.+16     	; 0x312 <main+0x7a>
   putsLCD("Astept     ");
   
   while(1){
      if(loop_cnt==200){
         code_ante=code_now;
         code_now = kbscan();
 302:	d8 2e       	mov	r13, r24
         if(code_now != NOKEY && code_ante == NOKEY){
            kbhit=1;
            kbcode=code_now;
         }
         loop_cnt=0;
 304:	10 e0       	ldi	r17, 0x00	; 0
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	04 c0       	rjmp	.+8      	; 0x312 <main+0x7a>
      if(loop_cnt==200){
         code_ante=code_now;
         code_now = kbscan();
         if(code_now != NOKEY && code_ante == NOKEY){
            kbhit=1;
            kbcode=code_now;
 30a:	08 2f       	mov	r16, r24
   putsLCD("Astept     ");
   
   while(1){
      if(loop_cnt==200){
         code_ante=code_now;
         code_now = kbscan();
 30c:	d8 2e       	mov	r13, r24
         if(code_now != NOKEY && code_ante == NOKEY){
            kbhit=1;
            kbcode=code_now;
         }
         loop_cnt=0;
 30e:	10 e0       	ldi	r17, 0x00	; 0
   while(1){
      if(loop_cnt==200){
         code_ante=code_now;
         code_now = kbscan();
         if(code_now != NOKEY && code_ante == NOKEY){
            kbhit=1;
 310:	81 e0       	ldi	r24, 0x01	; 1
            kbcode=code_now;
         }
         loop_cnt=0;
      }
      loop_cnt++;
 312:	1f 5f       	subi	r17, 0xFF	; 255
      
      //PWM start
      if(kbhit  && (kbcode == 'C' || kbcode == 'D')){
 314:	88 23       	and	r24, r24
 316:	09 f4       	brne	.+2      	; 0x31a <main+0x82>
 318:	3e c0       	rjmp	.+124    	; 0x396 <main+0xfe>
 31a:	9d eb       	ldi	r25, 0xBD	; 189
 31c:	90 0f       	add	r25, r16
 31e:	92 30       	cpi	r25, 0x02	; 2
 320:	d0 f5       	brcc	.+116    	; 0x396 <main+0xfe>
         kbhit=0;
         if(kbcode == 'C'){
 322:	03 34       	cpi	r16, 0x43	; 67
 324:	61 f4       	brne	.+24     	; 0x33e <main+0xa6>
            lumi=lumi+5;//...creste luminozitatea cu 5%
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	e8 0e       	add	r14, r24
 32a:	f1 1c       	adc	r15, r1
            //...
            if(lumi>100){
 32c:	95 e6       	ldi	r25, 0x65	; 101
 32e:	e9 16       	cp	r14, r25
 330:	f1 04       	cpc	r15, r1
 332:	2c f0       	brlt	.+10     	; 0x33e <main+0xa6>
               lumi=100;
 334:	0f 2e       	mov	r0, r31
 336:	f4 e6       	ldi	r31, 0x64	; 100
 338:	ef 2e       	mov	r14, r31
 33a:	f1 2c       	mov	r15, r1
 33c:	f0 2d       	mov	r31, r0
            }
         }
         if(kbcode == 'D'){
 33e:	04 34       	cpi	r16, 0x44	; 68
 340:	31 f4       	brne	.+12     	; 0x34e <main+0xb6>
            lumi=lumi-5;//...scade luminozitatea cu 5%
 342:	25 e0       	ldi	r18, 0x05	; 5
 344:	e2 1a       	sub	r14, r18
 346:	f1 08       	sbc	r15, r1
            //...
            if(lumi<0){
 348:	12 f4       	brpl	.+4      	; 0x34e <main+0xb6>
               lumi=0;
 34a:	e1 2c       	mov	r14, r1
 34c:	f1 2c       	mov	r15, r1
            }
         }
         
         OCR0 = lumi*255/100-1; //......
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	2e 9d       	mul	r18, r14
 352:	c0 01       	movw	r24, r0
 354:	2f 9d       	mul	r18, r15
 356:	90 0d       	add	r25, r0
 358:	11 24       	eor	r1, r1
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__divmodhi4>
 362:	61 50       	subi	r22, 0x01	; 1
 364:	6c bf       	out	0x3c, r22	; 60
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 366:	4a e0       	ldi	r20, 0x0A	; 10
 368:	be 01       	movw	r22, r28
 36a:	6f 5f       	subi	r22, 0xFF	; 255
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	c7 01       	movw	r24, r14
 370:	0e 94 16 02 	call	0x42c	; 0x42c <__itoa_ncheck>
         
         itoa(lumi,buf_lumi,10);
         gotoLC(2,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gotoLC>
         putsLCD("L=");
 37c:	8e e7       	ldi	r24, 0x7E	; 126
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
         putsLCD(buf_lumi);
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
         putsLCD("%  " );
 38c:	81 e8       	ldi	r24, 0x81	; 129
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
      }
      loop_cnt++;
      
      //PWM start
      if(kbhit  && (kbcode == 'C' || kbcode == 'D')){
         kbhit=0;
 394:	80 e0       	ldi	r24, 0x00	; 0
         putsLCD("%  " );
      }
      //PWM end
      
      //simulare calcul de durata
      if( kbhit && kbcode>='0' && kbcode<='9'){
 396:	88 23       	and	r24, r24
 398:	09 f4       	brne	.+2      	; 0x39c <main+0x104>
 39a:	a4 cf       	rjmp	.-184    	; 0x2e4 <main+0x4c>
 39c:	00 33       	cpi	r16, 0x30	; 48
 39e:	08 f4       	brcc	.+2      	; 0x3a2 <main+0x10a>
 3a0:	a1 cf       	rjmp	.-190    	; 0x2e4 <main+0x4c>
 3a2:	0a 33       	cpi	r16, 0x3A	; 58
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <main+0x110>
 3a6:	9e cf       	rjmp	.-196    	; 0x2e4 <main+0x4c>
         //kbhit=0;
         //scrie "Calculez..." de la pozitia 1, 1
         gotoLC(1,1);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gotoLC>
         putsLCD("Calculez    ");
 3b0:	85 e8       	ldi	r24, 0x85	; 133
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	91 e1       	ldi	r25, 0x11	; 17
 3bc:	2a e7       	ldi	r18, 0x7A	; 122
 3be:	81 50       	subi	r24, 0x01	; 1
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	20 40       	sbci	r18, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x126>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x130>
 3c8:	00 00       	nop
         _delay_ms(5000);
         //scrie "Astept     " de la pozitia 1, 1
         gotoLC(1,1);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gotoLC>
         putsLCD("Astept    ");
 3d2:	82 e9       	ldi	r24, 0x92	; 146
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
 3da:	84 cf       	rjmp	.-248    	; 0x2e4 <main+0x4c>

000003dc <__divmodhi4>:
 3dc:	97 fb       	bst	r25, 7
 3de:	07 2e       	mov	r0, r23
 3e0:	16 f4       	brtc	.+4      	; 0x3e6 <__divmodhi4+0xa>
 3e2:	00 94       	com	r0
 3e4:	07 d0       	rcall	.+14     	; 0x3f4 <__divmodhi4_neg1>
 3e6:	77 fd       	sbrc	r23, 7
 3e8:	09 d0       	rcall	.+18     	; 0x3fc <__divmodhi4_neg2>
 3ea:	0e 94 02 02 	call	0x404	; 0x404 <__udivmodhi4>
 3ee:	07 fc       	sbrc	r0, 7
 3f0:	05 d0       	rcall	.+10     	; 0x3fc <__divmodhi4_neg2>
 3f2:	3e f4       	brtc	.+14     	; 0x402 <__divmodhi4_exit>

000003f4 <__divmodhi4_neg1>:
 3f4:	90 95       	com	r25
 3f6:	81 95       	neg	r24
 3f8:	9f 4f       	sbci	r25, 0xFF	; 255
 3fa:	08 95       	ret

000003fc <__divmodhi4_neg2>:
 3fc:	70 95       	com	r23
 3fe:	61 95       	neg	r22
 400:	7f 4f       	sbci	r23, 0xFF	; 255

00000402 <__divmodhi4_exit>:
 402:	08 95       	ret

00000404 <__udivmodhi4>:
 404:	aa 1b       	sub	r26, r26
 406:	bb 1b       	sub	r27, r27
 408:	51 e1       	ldi	r21, 0x11	; 17
 40a:	07 c0       	rjmp	.+14     	; 0x41a <__udivmodhi4_ep>

0000040c <__udivmodhi4_loop>:
 40c:	aa 1f       	adc	r26, r26
 40e:	bb 1f       	adc	r27, r27
 410:	a6 17       	cp	r26, r22
 412:	b7 07       	cpc	r27, r23
 414:	10 f0       	brcs	.+4      	; 0x41a <__udivmodhi4_ep>
 416:	a6 1b       	sub	r26, r22
 418:	b7 0b       	sbc	r27, r23

0000041a <__udivmodhi4_ep>:
 41a:	88 1f       	adc	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	5a 95       	dec	r21
 420:	a9 f7       	brne	.-22     	; 0x40c <__udivmodhi4_loop>
 422:	80 95       	com	r24
 424:	90 95       	com	r25
 426:	bc 01       	movw	r22, r24
 428:	cd 01       	movw	r24, r26
 42a:	08 95       	ret

0000042c <__itoa_ncheck>:
 42c:	bb 27       	eor	r27, r27
 42e:	4a 30       	cpi	r20, 0x0A	; 10
 430:	31 f4       	brne	.+12     	; 0x43e <__itoa_ncheck+0x12>
 432:	99 23       	and	r25, r25
 434:	22 f4       	brpl	.+8      	; 0x43e <__itoa_ncheck+0x12>
 436:	bd e2       	ldi	r27, 0x2D	; 45
 438:	90 95       	com	r25
 43a:	81 95       	neg	r24
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	0c 94 22 02 	jmp	0x444	; 0x444 <__utoa_common>

00000442 <__utoa_ncheck>:
 442:	bb 27       	eor	r27, r27

00000444 <__utoa_common>:
 444:	fb 01       	movw	r30, r22
 446:	55 27       	eor	r21, r21
 448:	aa 27       	eor	r26, r26
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	aa 1f       	adc	r26, r26
 450:	a4 17       	cp	r26, r20
 452:	10 f0       	brcs	.+4      	; 0x458 <__utoa_common+0x14>
 454:	a4 1b       	sub	r26, r20
 456:	83 95       	inc	r24
 458:	50 51       	subi	r21, 0x10	; 16
 45a:	b9 f7       	brne	.-18     	; 0x44a <__utoa_common+0x6>
 45c:	a0 5d       	subi	r26, 0xD0	; 208
 45e:	aa 33       	cpi	r26, 0x3A	; 58
 460:	08 f0       	brcs	.+2      	; 0x464 <__stack+0x5>
 462:	a9 5d       	subi	r26, 0xD9	; 217
 464:	a1 93       	st	Z+, r26
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	79 f7       	brne	.-34     	; 0x448 <__utoa_common+0x4>
 46a:	b1 11       	cpse	r27, r1
 46c:	b1 93       	st	Z+, r27
 46e:	11 92       	st	Z+, r1
 470:	cb 01       	movw	r24, r22
 472:	0c 94 3b 02 	jmp	0x476	; 0x476 <strrev>

00000476 <strrev>:
 476:	dc 01       	movw	r26, r24
 478:	fc 01       	movw	r30, r24
 47a:	67 2f       	mov	r22, r23
 47c:	71 91       	ld	r23, Z+
 47e:	77 23       	and	r23, r23
 480:	e1 f7       	brne	.-8      	; 0x47a <strrev+0x4>
 482:	32 97       	sbiw	r30, 0x02	; 2
 484:	04 c0       	rjmp	.+8      	; 0x48e <strrev+0x18>
 486:	7c 91       	ld	r23, X
 488:	6d 93       	st	X+, r22
 48a:	70 83       	st	Z, r23
 48c:	62 91       	ld	r22, -Z
 48e:	ae 17       	cp	r26, r30
 490:	bf 07       	cpc	r27, r31
 492:	c8 f3       	brcs	.-14     	; 0x486 <strrev+0x10>
 494:	08 95       	ret

00000496 <_exit>:
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
