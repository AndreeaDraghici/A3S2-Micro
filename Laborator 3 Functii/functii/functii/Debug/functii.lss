
functii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060d  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056a  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000217  00000000  00000000  00000d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fc  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000095  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
   unsigned char inputs;
   unsigned char vx2, vx1, vx0;
   unsigned char outs;
   unsigned char temp;
   
   DDRA = 0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
   DDRB = 0b00000000;
  70:	17 ba       	out	0x17, r1	; 23
   
   while(1)
   {
      inputs = PINB;
  72:	26 b3       	in	r18, 0x16	; 22
      inputs &=0b0000111;
  74:	92 2f       	mov	r25, r18
  76:	97 70       	andi	r25, 0x07	; 7

      vx0 = inputs & 1<<0;
      vx1 = inputs >>1 & 1<<0;
  78:	39 2f       	mov	r19, r25
  7a:	36 95       	lsr	r19
  7c:	43 2f       	mov	r20, r19
  7e:	41 70       	andi	r20, 0x01	; 1
      vx2 = inputs >>2 & 1<<0;
  80:	89 2f       	mov	r24, r25
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	58 2f       	mov	r21, r24
  88:	51 70       	andi	r21, 0x01	; 1

      outs = 0;

      temp = vx2 ^ vx1 ^ vx0;
  8a:	38 27       	eor	r19, r24
  8c:	23 27       	eor	r18, r19
      if( temp & 1<<0)
  8e:	20 fd       	sbrc	r18, 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>

      vx0 = inputs & 1<<0;
      vx1 = inputs >>1 & 1<<0;
      vx2 = inputs >>2 & 1<<0;

      outs = 0;
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	01 c0       	rjmp	.+2      	; 0x98 <main+0x2c>

      temp = vx2 ^ vx1 ^ vx0;
      if( temp & 1<<0)
      {
         outs |= 1<<0; //f0
  96:	21 e0       	ldi	r18, 0x01	; 1
      }

      if(inputs<3)
  98:	93 30       	cpi	r25, 0x03	; 3
  9a:	08 f4       	brcc	.+2      	; 0x9e <main+0x32>
      {
         outs |= 1<<1; //f1
  9c:	22 60       	ori	r18, 0x02	; 2
      }

      temp = (~ vx2 & vx1 ) | ( vx2 & vx0 );
  9e:	35 2f       	mov	r19, r21
  a0:	30 95       	com	r19
  a2:	34 23       	and	r19, r20
  a4:	89 23       	and	r24, r25
      if( temp & 1<<0)
  a6:	83 2b       	or	r24, r19
  a8:	09 f0       	breq	.+2      	; 0xac <main+0x40>
      {
         outs |= 1<<2 ; //f2
  aa:	24 60       	ori	r18, 0x04	; 4
      }
      
      PORTA = outs;
  ac:	2b bb       	out	0x1b, r18	; 27
   }
  ae:	e1 cf       	rjmp	.-62     	; 0x72 <main+0x6>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
