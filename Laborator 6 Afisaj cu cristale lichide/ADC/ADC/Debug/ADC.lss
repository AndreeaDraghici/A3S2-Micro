
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000366  000003fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800066  00800066  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b99  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000722  00000000  00000000  0000106d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d6  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e4  00000000  00000000  000020d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000024b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main(void)
{
    unsigned int val,valoareSute,valoareZeci,valoareUnitati;
    long temp;
    //char buf[20];
    initLCD();
  92:	0e 94 fe 00 	call	0x1fc	; 0x1fc <initLCD>
    // ADMUX register
    //REFS1 REFS0 ADLAR MUX4 MUX3 MUX2 MUX1 MUX0
    // |      |     |     0    0   0    0    0    Vin = ADC0
    // |      |     1   aliniere la stanga
    // 0      1    VREF = AVCC
    ADMUX =0b01100000;
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	87 b9       	out	0x07, r24	; 7
    // |      |    |    |     |    1     1     1    factor divizare=128
    // |      |    0    |     0    ADIE si ADATE se seteaza la ‚0’ si nu se mai modifica
    // |      |         0
    // |      0         0
    // 1   enable ADC
    ADCSRA = 0b10000111;
  9a:	87 e8       	ldi	r24, 0x87	; 135
  9c:	86 b9       	out	0x06, r24	; 6
    
    while (1) 
    {
       // daca ADC este in repaus adica nu exists conversie in curs
       if( testbit(ADCSRA , ADSC) == 0 && testbit(ADCSRA , ADIF) == 0)  {
  9e:	36 99       	sbic	0x06, 6	; 6
  a0:	05 c0       	rjmp	.+10     	; 0xac <main+0x1a>
  a2:	34 99       	sbic	0x06, 4	; 6
  a4:	03 c0       	rjmp	.+6      	; 0xac <main+0x1a>
          setbit(ADCSRA, ADSC);   //start conversie
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	86 b9       	out	0x06, r24	; 6
       }
       // daca s-a terminat conversia
       if( testbit(ADCSRA , ADSC) == 0 && testbit(ADCSRA , ADIF)) {
  ac:	36 99       	sbic	0x06, 6	; 6
  ae:	f7 cf       	rjmp	.-18     	; 0x9e <main+0xc>
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	f5 cf       	rjmp	.-22     	; 0x9e <main+0xc>
          // sterge bitul care indica sfarsitul conversiei
          clrbit(ADCSRA , ADIF);
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	86 b9       	out	0x06, r24	; 6
          // citeste rezultatul conversiei din portul de date conform setarii ADLAR
          val=ADCH;   //din ce port?
  ba:	25 b1       	in	r18, 0x05	; 5
  bc:	30 e0       	ldi	r19, 0x00	; 0
          
          temp=(5*val*100UL)/255;
  be:	c9 01       	movw	r24, r18
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	28 0f       	add	r18, r24
  ca:	39 1f       	adc	r19, r25
  cc:	a4 e6       	ldi	r26, 0x64	; 100
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	0e 94 a2 01 	call	0x344	; 0x344 <__umulhisi3>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__udivmodsi4>
  e0:	49 01       	movw	r8, r18
  e2:	5a 01       	movw	r10, r20
          
          valoareSute=temp/100%10;
  e4:	ca 01       	movw	r24, r20
  e6:	b9 01       	movw	r22, r18
  e8:	24 e6       	ldi	r18, 0x64	; 100
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	0e 94 83 01 	call	0x306	; 0x306 <__divmodsi4>
  f4:	0f 2e       	mov	r0, r31
  f6:	fa e0       	ldi	r31, 0x0A	; 10
  f8:	cf 2e       	mov	r12, r31
  fa:	d1 2c       	mov	r13, r1
  fc:	e1 2c       	mov	r14, r1
  fe:	f1 2c       	mov	r15, r1
 100:	f0 2d       	mov	r31, r0
 102:	ca 01       	movw	r24, r20
 104:	b9 01       	movw	r22, r18
 106:	a7 01       	movw	r20, r14
 108:	96 01       	movw	r18, r12
 10a:	0e 94 83 01 	call	0x306	; 0x306 <__divmodsi4>
 10e:	16 2f       	mov	r17, r22
          valoareZeci=temp/10%10;
 110:	c5 01       	movw	r24, r10
 112:	b4 01       	movw	r22, r8
 114:	a7 01       	movw	r20, r14
 116:	96 01       	movw	r18, r12
 118:	0e 94 83 01 	call	0x306	; 0x306 <__divmodsi4>
 11c:	c6 2f       	mov	r28, r22
 11e:	ca 01       	movw	r24, r20
 120:	b9 01       	movw	r22, r18
 122:	a7 01       	movw	r20, r14
 124:	96 01       	movw	r18, r12
 126:	0e 94 83 01 	call	0x306	; 0x306 <__divmodsi4>
 12a:	d6 2f       	mov	r29, r22
          //buf[0]='0'+valoareSute;
          //buf[1]='0'+valoareZeci;
          //buf[2]='0'+valoareUnitati;
          //buf[3]=0;
         
          gotoLC(1,1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 35 01 	call	0x26a	; 0x26a <gotoLC>
          putsLCD("V= ");
 134:	81 e6       	ldi	r24, 0x61	; 97
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 54 01 	call	0x2a8	; 0x2a8 <putsLCD>
          putchLCD(valoareSute+'0');
 13c:	80 e3       	ldi	r24, 0x30	; 48
 13e:	81 0f       	add	r24, r17
 140:	0e 94 4b 01 	call	0x296	; 0x296 <putchLCD>
          putchLCD('.');
 144:	8e e2       	ldi	r24, 0x2E	; 46
 146:	0e 94 4b 01 	call	0x296	; 0x296 <putchLCD>
          putchLCD(valoareZeci+'0');
 14a:	80 e3       	ldi	r24, 0x30	; 48
 14c:	8d 0f       	add	r24, r29
 14e:	0e 94 4b 01 	call	0x296	; 0x296 <putchLCD>
          putchLCD(valoareUnitati+'0');
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	8c 0f       	add	r24, r28
 156:	0e 94 4b 01 	call	0x296	; 0x296 <putchLCD>
 15a:	a1 cf       	rjmp	.-190    	; 0x9e <main+0xc>

0000015c <wr_LCDreg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	96 2f       	mov	r25, r22
 15e:	92 95       	swap	r25
 160:	9f 70       	andi	r25, 0x0F	; 15
 162:	92 bb       	out	0x12, r25	; 18
 164:	81 11       	cpse	r24, r1
 166:	04 c0       	rjmp	.+8      	; 0x170 <wr_LCDreg+0x14>
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	03 c0       	rjmp	.+6      	; 0x176 <wr_LCDreg+0x1a>
 170:	82 b3       	in	r24, 0x12	; 18
 172:	80 61       	ori	r24, 0x10	; 16
 174:	82 bb       	out	0x12, r24	; 18
 176:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 180:	82 b3       	in	r24, 0x12	; 18
 182:	80 62       	ori	r24, 0x20	; 32
 184:	82 bb       	out	0x12, r24	; 18
 186:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 190:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	8f 7d       	andi	r24, 0xDF	; 223
 19e:	82 bb       	out	0x12, r24	; 18
 1a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 1aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <wr_LCDreg+0x5c>
 1b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b6:	08 95       	ret
 1b8:	82 b3       	in	r24, 0x12	; 18
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	82 bb       	out	0x12, r24	; 18
 1be:	82 b3       	in	r24, 0x12	; 18
 1c0:	6f 70       	andi	r22, 0x0F	; 15
 1c2:	68 2b       	or	r22, r24
 1c4:	62 bb       	out	0x12, r22	; 18
 1c6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 1d0:	82 b3       	in	r24, 0x12	; 18
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	82 bb       	out	0x12, r24	; 18
 1d6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 1e0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 1ea:	82 b3       	in	r24, 0x12	; 18
 1ec:	8f 7d       	andi	r24, 0xDF	; 223
 1ee:	82 bb       	out	0x12, r24	; 18
 1f0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 1fa:	08 95       	ret

000001fc <initLCD>:
 1fc:	12 ba       	out	0x12, r1	; 18
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	81 bb       	out	0x11, r24	; 17
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	89 e6       	ldi	r24, 0x69	; 105
 206:	98 e1       	ldi	r25, 0x18	; 24
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 210:	00 c0       	rjmp	.+0      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 212:	00 00       	nop
 214:	6c e2       	ldi	r22, 0x2C	; 44
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 ae 00 	call	0x15c	; 0x15c <wr_LCDreg>
 21c:	25 e8       	ldi	r18, 0x85	; 133
 21e:	2a 95       	dec	r18
 220:	f1 f7       	brne	.-4      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 222:	00 00       	nop
 224:	6c e2       	ldi	r22, 0x2C	; 44
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 ae 00 	call	0x15c	; 0x15c <wr_LCDreg>
 22c:	85 e8       	ldi	r24, 0x85	; 133
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 232:	00 00       	nop
 234:	6e e0       	ldi	r22, 0x0E	; 14
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 ae 00 	call	0x15c	; 0x15c <wr_LCDreg>
 23c:	95 e8       	ldi	r25, 0x85	; 133
 23e:	9a 95       	dec	r25
 240:	f1 f7       	brne	.-4      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 242:	00 00       	nop
 244:	66 e0       	ldi	r22, 0x06	; 6
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 ae 00 	call	0x15c	; 0x15c <wr_LCDreg>
 24c:	25 e8       	ldi	r18, 0x85	; 133
 24e:	2a 95       	dec	r18
 250:	f1 f7       	brne	.-4      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 252:	00 00       	nop
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 ae 00 	call	0x15c	; 0x15c <wr_LCDreg>
 25c:	8f e6       	ldi	r24, 0x6F	; 111
 25e:	97 e1       	ldi	r25, 0x17	; 23
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 264:	00 c0       	rjmp	.+0      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <gotoLC>:
	wr_LCDreg(IReg, 0x01);
    _delay_ms(2);
}

void gotoLC(unsigned char line, unsigned char col){
   if(line>=1 && line<=2 && col>=1 && col <= 16){
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	90 f4       	brcc	.+36     	; 0x294 <gotoLC+0x2a>
 270:	66 23       	and	r22, r22
 272:	81 f0       	breq	.+32     	; 0x294 <gotoLC+0x2a>
 274:	61 31       	cpi	r22, 0x11	; 17
 276:	70 f4       	brcc	.+28     	; 0x294 <gotoLC+0x2a>
      wr_LCDreg(IReg, 0x80 + 0x40 * --line + --col); //set DDRAM address
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 96       	adiw	r24, 0x02	; 2
 27c:	61 50       	subi	r22, 0x01	; 1
 27e:	20 e4       	ldi	r18, 0x40	; 64
 280:	82 9f       	mul	r24, r18
 282:	60 0d       	add	r22, r0
 284:	11 24       	eor	r1, r1
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 ae 00 	call	0x15c	; 0x15c <wr_LCDreg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	85 e8       	ldi	r24, 0x85	; 133
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <gotoLC+0x24>
 292:	00 00       	nop
 294:	08 95       	ret

00000296 <putchLCD>:
      _delay_us(50);
   }
}

void putchLCD(char ch){
	wr_LCDreg(DReg,ch);
 296:	68 2f       	mov	r22, r24
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 ae 00 	call	0x15c	; 0x15c <wr_LCDreg>
 29e:	85 e8       	ldi	r24, 0x85	; 133
 2a0:	8a 95       	dec	r24
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <putchLCD+0xa>
 2a4:	00 00       	nop
 2a6:	08 95       	ret

000002a8 <putsLCD>:
   _delay_us(50);
}

void putsLCD( char ch[]){
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
	while(*ch)
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <putsLCD+0xe>
		putchLCD(*ch++);
 2b0:	21 96       	adiw	r28, 0x01	; 1
 2b2:	0e 94 4b 01 	call	0x296	; 0x296 <putchLCD>
	wr_LCDreg(DReg,ch);
   _delay_us(50);
}

void putsLCD( char ch[]){
	while(*ch)
 2b6:	88 81       	ld	r24, Y
 2b8:	81 11       	cpse	r24, r1
 2ba:	fa cf       	rjmp	.-12     	; 0x2b0 <putsLCD+0x8>
		putchLCD(*ch++);
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <__udivmodsi4>:
 2c2:	a1 e2       	ldi	r26, 0x21	; 33
 2c4:	1a 2e       	mov	r1, r26
 2c6:	aa 1b       	sub	r26, r26
 2c8:	bb 1b       	sub	r27, r27
 2ca:	fd 01       	movw	r30, r26
 2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <__udivmodsi4_ep>

000002ce <__udivmodsi4_loop>:
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	ee 1f       	adc	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	a2 17       	cp	r26, r18
 2d8:	b3 07       	cpc	r27, r19
 2da:	e4 07       	cpc	r30, r20
 2dc:	f5 07       	cpc	r31, r21
 2de:	20 f0       	brcs	.+8      	; 0x2e8 <__udivmodsi4_ep>
 2e0:	a2 1b       	sub	r26, r18
 2e2:	b3 0b       	sbc	r27, r19
 2e4:	e4 0b       	sbc	r30, r20
 2e6:	f5 0b       	sbc	r31, r21

000002e8 <__udivmodsi4_ep>:
 2e8:	66 1f       	adc	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	88 1f       	adc	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	1a 94       	dec	r1
 2f2:	69 f7       	brne	.-38     	; 0x2ce <__udivmodsi4_loop>
 2f4:	60 95       	com	r22
 2f6:	70 95       	com	r23
 2f8:	80 95       	com	r24
 2fa:	90 95       	com	r25
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	bd 01       	movw	r22, r26
 302:	cf 01       	movw	r24, r30
 304:	08 95       	ret

00000306 <__divmodsi4>:
 306:	05 2e       	mov	r0, r21
 308:	97 fb       	bst	r25, 7
 30a:	1e f4       	brtc	.+6      	; 0x312 <__divmodsi4+0xc>
 30c:	00 94       	com	r0
 30e:	0e 94 9a 01 	call	0x334	; 0x334 <__negsi2>
 312:	57 fd       	sbrc	r21, 7
 314:	07 d0       	rcall	.+14     	; 0x324 <__divmodsi4_neg2>
 316:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__udivmodsi4>
 31a:	07 fc       	sbrc	r0, 7
 31c:	03 d0       	rcall	.+6      	; 0x324 <__divmodsi4_neg2>
 31e:	4e f4       	brtc	.+18     	; 0x332 <__divmodsi4_exit>
 320:	0c 94 9a 01 	jmp	0x334	; 0x334 <__negsi2>

00000324 <__divmodsi4_neg2>:
 324:	50 95       	com	r21
 326:	40 95       	com	r20
 328:	30 95       	com	r19
 32a:	21 95       	neg	r18
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	4f 4f       	sbci	r20, 0xFF	; 255
 330:	5f 4f       	sbci	r21, 0xFF	; 255

00000332 <__divmodsi4_exit>:
 332:	08 95       	ret

00000334 <__negsi2>:
 334:	90 95       	com	r25
 336:	80 95       	com	r24
 338:	70 95       	com	r23
 33a:	61 95       	neg	r22
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	8f 4f       	sbci	r24, 0xFF	; 255
 340:	9f 4f       	sbci	r25, 0xFF	; 255
 342:	08 95       	ret

00000344 <__umulhisi3>:
 344:	a2 9f       	mul	r26, r18
 346:	b0 01       	movw	r22, r0
 348:	b3 9f       	mul	r27, r19
 34a:	c0 01       	movw	r24, r0
 34c:	a3 9f       	mul	r26, r19
 34e:	70 0d       	add	r23, r0
 350:	81 1d       	adc	r24, r1
 352:	11 24       	eor	r1, r1
 354:	91 1d       	adc	r25, r1
 356:	b2 9f       	mul	r27, r18
 358:	70 0d       	add	r23, r0
 35a:	81 1d       	adc	r24, r1
 35c:	11 24       	eor	r1, r1
 35e:	91 1d       	adc	r25, r1
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
